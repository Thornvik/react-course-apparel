{"ast":null,"code":"import { takeEvery } from \"redux-saga/effects\";\nimport ShopActionTypes from \"./shop.types\";\nexport function* fetchCollectionsAsync() {\n  yield console.log(\"i am fire\");\n}\nexport function* fetchCollectionsStart() {\n  yield takeEvery( //creates a non blocking call\n  //which makes it so that our application will not stop running and run other sagas or other things that we dont want to stop\n  //it also alows us to stop things form happening\n  //ex if the user has called for the data once but does so again we dont want that call to also run, so we stop the new call from running\n  //this happens by us \"yielding\" over control of this saga to the saga middleware\n  //which can determine whether to cancel or not any of the previously started sages from the other cactions that came in,\n  //we cand control that because of the yield\n  ShopActionTypes.FETCH_COLLECTIONS_START, //it first listend for this action\n  fetchCollectionsAsync //then did this, and then to fetchcollectionAsync to console.log\n  );\n}","map":{"version":3,"sources":["/Users/tthornvik/Documents/udemy/crwn-clothing/src/redux/shop/shop.sagas.js"],"names":["takeEvery","ShopActionTypes","fetchCollectionsAsync","console","log","fetchCollectionsStart","FETCH_COLLECTIONS_START"],"mappings":"AAAA,SAASA,SAAT,QAA0B,oBAA1B;AAEA,OAAOC,eAAP,MAA4B,cAA5B;AAEA,OAAO,UAAUC,qBAAV,GAAkC;AACvC,QAAMC,OAAO,CAACC,GAAR,CAAY,WAAZ,CAAN;AACD;AAED,OAAO,UAAUC,qBAAV,GAAkC;AACvC,QAAML,SAAS,EACb;AACA;AACA;AACA;AACA;AACA;AACA;AACAC,EAAAA,eAAe,CAACK,uBARH,EASb;AACAJ,EAAAA,qBAVa,CAWb;AAXa,GAAf;AAaD","sourcesContent":["import { takeEvery } from \"redux-saga/effects\";\n\nimport ShopActionTypes from \"./shop.types\";\n\nexport function* fetchCollectionsAsync() {\n  yield console.log(\"i am fire\");\n}\n\nexport function* fetchCollectionsStart() {\n  yield takeEvery(\n    //creates a non blocking call\n    //which makes it so that our application will not stop running and run other sagas or other things that we dont want to stop\n    //it also alows us to stop things form happening\n    //ex if the user has called for the data once but does so again we dont want that call to also run, so we stop the new call from running\n    //this happens by us \"yielding\" over control of this saga to the saga middleware\n    //which can determine whether to cancel or not any of the previously started sages from the other cactions that came in,\n    //we cand control that because of the yield\n    ShopActionTypes.FETCH_COLLECTIONS_START,\n    //it first listend for this action\n    fetchCollectionsAsync\n    //then did this, and then to fetchcollectionAsync to console.log\n  );\n}\n"]},"metadata":{},"sourceType":"module"}