{"ast":null,"code":"import { takeLatest, call, put, all } from \"redux-saga/effects\";\nimport { firestore, convertCollectionsSnapshotToMap } from \"../../firebase/firebase.utils\";\nimport { fetchCollectionsSuccess, fetchCollectionsFailure } from \"./shop.actions\";\nimport ShopActionTypes from \"./shop.types\";\nexport function* fetchCollectionsAsync() {\n  yield console.log(\"i am fire\");\n\n  try {\n    const collectionRef = firestore.collection(\"collections\");\n    const snapshot = yield collectionRef.get();\n    const collectionsMAp = yield call(convertCollectionsSnapshotToMap, snapshot); //becuase we are yielding this call it allows to defer control at this point of the execution to the saga middleware\n    //so incase it hase to cancel we give it another place where it is able to do so\n    //adding more yields like this also makes it eaiser to test\n    //the call effect from redux saga, creates a description of the effect like in redux, where ypu use action creators to create a plain object describing the action that will get executed.\n\n    yield put(fetchCollectionsSuccess(collectionsMAp)); //put is and effect from redux sagas, that creates actions that ar e exactly like dispatch\n  } catch (error) {\n    yield put(fetchCollectionsFailure(error.message));\n  }\n}\nexport function* fetchCollectionsStart() {\n  yield takeLatest( //this will make it so it only calls once, since takeLates will cancel the previous ones\n  ShopActionTypes.FETCH_COLLECTIONS_START, //it first listend for this action\n  fetchCollectionsAsync //then did this, and then to fetchcollectionAsync to console.log\n  );\n}\nexport function* shopSagas() {\n  yield all(call(fetchCollectionsStart));\n}","map":{"version":3,"sources":["/Users/tthornvik/Documents/udemy/crwn-clothing/src/redux/shop/shop.sagas.js"],"names":["takeLatest","call","put","all","firestore","convertCollectionsSnapshotToMap","fetchCollectionsSuccess","fetchCollectionsFailure","ShopActionTypes","fetchCollectionsAsync","console","log","collectionRef","collection","snapshot","get","collectionsMAp","error","message","fetchCollectionsStart","FETCH_COLLECTIONS_START","shopSagas"],"mappings":"AAAA,SAASA,UAAT,EAAqBC,IAArB,EAA2BC,GAA3B,EAAgCC,GAAhC,QAA2C,oBAA3C;AAEA,SACEC,SADF,EAEEC,+BAFF,QAGO,+BAHP;AAKA,SACEC,uBADF,EAEEC,uBAFF,QAGO,gBAHP;AAKA,OAAOC,eAAP,MAA4B,cAA5B;AAEA,OAAO,UAAUC,qBAAV,GAAkC;AACvC,QAAMC,OAAO,CAACC,GAAR,CAAY,WAAZ,CAAN;;AAEA,MAAI;AACF,UAAMC,aAAa,GAAGR,SAAS,CAACS,UAAV,CAAqB,aAArB,CAAtB;AACA,UAAMC,QAAQ,GAAG,MAAMF,aAAa,CAACG,GAAd,EAAvB;AACA,UAAMC,cAAc,GAAG,MAAMf,IAAI,CAC/BI,+BAD+B,EAE/BS,QAF+B,CAAjC,CAHE,CAOF;AACA;AACA;AACA;;AACA,UAAMZ,GAAG,CAACI,uBAAuB,CAACU,cAAD,CAAxB,CAAT,CAXE,CAYF;AACD,GAbD,CAaE,OAAOC,KAAP,EAAc;AACd,UAAMf,GAAG,CAACK,uBAAuB,CAACU,KAAK,CAACC,OAAP,CAAxB,CAAT;AACD;AACF;AAED,OAAO,UAAUC,qBAAV,GAAkC;AACvC,QAAMnB,UAAU,EACd;AACAQ,EAAAA,eAAe,CAACY,uBAFF,EAGd;AACAX,EAAAA,qBAJc,CAKd;AALc,GAAhB;AAOD;AAED,OAAO,UAAUY,SAAV,GAAsB;AAC3B,QAAMlB,GAAG,CAACF,IAAI,CAACkB,qBAAD,CAAL,CAAT;AACD","sourcesContent":["import { takeLatest, call, put, all } from \"redux-saga/effects\";\n\nimport {\n  firestore,\n  convertCollectionsSnapshotToMap,\n} from \"../../firebase/firebase.utils\";\n\nimport {\n  fetchCollectionsSuccess,\n  fetchCollectionsFailure,\n} from \"./shop.actions\";\n\nimport ShopActionTypes from \"./shop.types\";\n\nexport function* fetchCollectionsAsync() {\n  yield console.log(\"i am fire\");\n\n  try {\n    const collectionRef = firestore.collection(\"collections\");\n    const snapshot = yield collectionRef.get();\n    const collectionsMAp = yield call(\n      convertCollectionsSnapshotToMap,\n      snapshot\n    );\n    //becuase we are yielding this call it allows to defer control at this point of the execution to the saga middleware\n    //so incase it hase to cancel we give it another place where it is able to do so\n    //adding more yields like this also makes it eaiser to test\n    //the call effect from redux saga, creates a description of the effect like in redux, where ypu use action creators to create a plain object describing the action that will get executed.\n    yield put(fetchCollectionsSuccess(collectionsMAp));\n    //put is and effect from redux sagas, that creates actions that ar e exactly like dispatch\n  } catch (error) {\n    yield put(fetchCollectionsFailure(error.message));\n  }\n}\n\nexport function* fetchCollectionsStart() {\n  yield takeLatest(\n    //this will make it so it only calls once, since takeLates will cancel the previous ones\n    ShopActionTypes.FETCH_COLLECTIONS_START,\n    //it first listend for this action\n    fetchCollectionsAsync\n    //then did this, and then to fetchcollectionAsync to console.log\n  );\n}\n\nexport function* shopSagas() {\n  yield all(call(fetchCollectionsStart));\n}\n"]},"metadata":{},"sourceType":"module"}